name: CI/CD Pipeline

# Когда запускать пайплайн
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Задача 1: Тестирование и проверки
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      # Скачиваем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Устанавливаем Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Кэшируем зависимости для ускорения
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Скачиваем зависимости
      - name: Download dependencies
        run: go mod download

      # Запускаем тесты
      - name: Run tests
        run: go test -v ./internal/tests/...

      # Проверяем форматирование кода
      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      # Собираем приложение
      - name: Build application
        run: go build -v ./cmd/AI-API

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t translator-service:latest .
          docker save translator-service:latest > translator-service.tar

      # Сохраняем образ как артефакт
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: translator-service.tar