name: CI/CD Pipeline

# Когда запускать пайплайн
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Задача 1: Тестирование и проверки
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      # Скачиваем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Устанавливаем Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      # Кэшируем зависимости для ускорения
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Скачиваем зависимости
      - name: Download dependencies
        run: go mod download

      # Запускаем тесты
      - name: Run tests
        run: go test -v ./internal/tests/...

      # Проверяем форматирование кода
      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            exit 1
          fi

      # Проверяем код линтером
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      # Собираем приложение
      - name: Build application
        run: go build -v ./cmd/AI-API

  # Задача 2: Сборка и пуш в Docker Hub (только при push в main)
  build-and-push:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: wendigo957/translator-service:latest

  # Задача 3: Автоматический деплой на VPS (только при push в main)
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: 85.192.61.114
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "🚀 Starting deployment..."
            
            # Останавливаем старый контейнер
            echo "🛑 Stopping old container..."
            docker stop translator || true
            docker rm translator || true
            
            # Очищаем старые образы
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            docker images wendigo957/translator-service | grep -v latest | awk 'NR>1{print $3}' | xargs docker rmi || true
            
            # Скачиваем новый образ
            echo "📦 Pulling latest image..."
            docker pull wendigo957/translator-service:latest
            
            # Запускаем новый контейнер
            echo "🔄 Starting new container..."
            docker run -d -p 8080:8080 --name translator \
              --restart unless-stopped \
              wendigo957/translator-service:latest
            
            # Ждем запуска
            echo "⏳ Waiting for container to start..."
            sleep 10
            
            # Проверяем что контейнер запустился
            if docker ps | grep -q translator; then
              echo "✅ Container is running!"
            
              # Тестируем API
              echo "🧪 Testing API endpoints..."
              if curl -f http://localhost:8080/languages > /dev/null 2>&1; then
                echo "✅ API is responding!"
                echo "🌐 Service successfully deployed at: http://85.192.61.114:8080"
              else
                echo "⚠️ Container running but API not responding"
                docker logs translator --tail=20
              fi
            else
              echo "❌ Container failed to start!"
              echo "📋 Container logs:"
              docker logs translator --tail=20
              echo "📋 System info:"
              docker ps -a | grep translator
              exit 1
            fi
            
            # Показываем статус системы
            echo "📊 System status:"
            docker ps | grep translator
            echo "💾 Disk usage:"
            df -h / | tail -1